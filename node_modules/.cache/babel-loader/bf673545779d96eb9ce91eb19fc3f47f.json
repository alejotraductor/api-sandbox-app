{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function expand(project, concurrent, scheduler) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n\n  if (scheduler === void 0) {\n    scheduler = undefined;\n  }\n\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n  return function (source) {\n    return source.lift(new ExpandOperator(project, concurrent, scheduler));\n  };\n}\n\nvar ExpandOperator = /*@__PURE__*/function () {\n  function ExpandOperator(project, concurrent, scheduler) {\n    this.project = project;\n    this.concurrent = concurrent;\n    this.scheduler = scheduler;\n  }\n\n  ExpandOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  };\n\n  return ExpandOperator;\n}();\n\nexport { ExpandOperator };\n\nvar ExpandSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ExpandSubscriber, _super);\n\n  function ExpandSubscriber(destination, project, concurrent, scheduler) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.project = project;\n    _this.concurrent = concurrent;\n    _this.scheduler = scheduler;\n    _this.index = 0;\n    _this.active = 0;\n    _this.hasCompleted = false;\n\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      _this.buffer = [];\n    }\n\n    return _this;\n  }\n\n  ExpandSubscriber.dispatch = function (arg) {\n    var subscriber = arg.subscriber,\n        result = arg.result,\n        value = arg.value,\n        index = arg.index;\n    subscriber.subscribeToProjection(result, value, index);\n  };\n\n  ExpandSubscriber.prototype._next = function (value) {\n    var destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n\n      return;\n    }\n\n    var index = this.index++;\n\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      var result = tryCatch(this.project)(value, index);\n\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        var state = {\n          subscriber: this,\n          result: result,\n          value: value,\n          index: index\n        };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  };\n\n  ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n    this.active++;\n    this.add(subscribeToResult(this, result, value, index));\n  };\n\n  ExpandSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  };\n\n  ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this._next(innerValue);\n  };\n\n  ExpandSubscriber.prototype.notifyComplete = function (innerSub) {\n    var buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  };\n\n  return ExpandSubscriber;\n}(OuterSubscriber);\n\nexport { ExpandSubscriber };","map":{"version":3,"sources":["../../../src/internal/operators/expand.ts"],"names":[],"mappings":"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","sourcesContent":["/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    if (scheduler === void 0) {\n        scheduler = undefined;\n    }\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };\n}\nvar ExpandOperator = /*@__PURE__*/ (function () {\n    function ExpandOperator(project, concurrent, scheduler) {\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n    }\n    ExpandOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    };\n    return ExpandOperator;\n}());\nexport { ExpandOperator };\nvar ExpandSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ExpandSubscriber, _super);\n    function ExpandSubscriber(destination, project, concurrent, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.concurrent = concurrent;\n        _this.scheduler = scheduler;\n        _this.index = 0;\n        _this.active = 0;\n        _this.hasCompleted = false;\n        if (concurrent < Number.POSITIVE_INFINITY) {\n            _this.buffer = [];\n        }\n        return _this;\n    }\n    ExpandSubscriber.dispatch = function (arg) {\n        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;\n        subscriber.subscribeToProjection(result, value, index);\n    };\n    ExpandSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (destination.closed) {\n            this._complete();\n            return;\n        }\n        var index = this.index++;\n        if (this.active < this.concurrent) {\n            destination.next(value);\n            var result = tryCatch(this.project)(value, index);\n            if (result === errorObject) {\n                destination.error(errorObject.e);\n            }\n            else if (!this.scheduler) {\n                this.subscribeToProjection(result, value, index);\n            }\n            else {\n                var state = { subscriber: this, result: result, value: value, index: index };\n                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n        this.active++;\n        this.add(subscribeToResult(this, result, value, index));\n    };\n    ExpandSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._next(innerValue);\n    };\n    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer && buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    return ExpandSubscriber;\n}(OuterSubscriber));\nexport { ExpandSubscriber };\n//# sourceMappingURL=expand.js.map\n"]},"metadata":{},"sourceType":"module"}