{"ast":null,"code":"/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nexport function range(start, count, scheduler) {\n  if (start === void 0) {\n    start = 0;\n  }\n\n  if (count === void 0) {\n    count = 0;\n  }\n\n  return new Observable(function (subscriber) {\n    var index = 0;\n    var current = start;\n\n    if (scheduler) {\n      return scheduler.schedule(dispatch, 0, {\n        index: index,\n        count: count,\n        start: start,\n        subscriber: subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n\n        subscriber.next(current++);\n\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n\n    return undefined;\n  });\n}\nexport function dispatch(state) {\n  var start = state.start,\n      index = state.index,\n      count = state.count,\n      subscriber = state.subscriber;\n\n  if (index >= count) {\n    subscriber.complete();\n    return;\n  }\n\n  subscriber.next(start);\n\n  if (subscriber.closed) {\n    return;\n  }\n\n  state.index = index + 1;\n  state.start = start + 1;\n  this.schedule(state);\n}","map":{"version":3,"sources":["../../../src/internal/observable/range.ts"],"names":[],"mappings":"AACA;AAkCA,SAAM,UAAN,QAAuC,eAAvC;AAAsB,OAAA,SAAA,KAAA,CAAA,KAAA,EAAA,KAAA,EAAA,SAAA,EAAiB;AACjB,MAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAEpB,IAAA,KAAO,GAAI,CAAX;AACE;;MACA,KAAI,KAAA,KAAU,C,EAAA;AAEd,IAAA,KAAI,GAAA,CAAJ;AACE;;aACE,U,CAAK,UAAO,UAAP,EAAS;QACf,KAAE,GAAA,C;AACJ,QAAA,OAAA,GAAA,KAAA;;QAAM,S,EAAA;AACL,aAAG,SAAA,CAAA,QAAA,CAAA,QAAA,EAAA,CAAA,EAAA;AACD,QAAA,KAAI,EAAA,KADH;AACU,QAAA,KAAI,EAAK,KADnB;AACqB,QAAA,KAAA,EAAA,KADrB;AACqB,QAAA,UAAA,EAAA;AADrB,OAAA,CAAH;AAGI,K,MACD;SACD;AACA,YAAI,KAAA,MAAW,KAAf,EAAqB;AACnB,UAAA,UAAM,CAAA,QAAN;AACD;AACF;;AACF,QAAA,UAAA,CAAA,IAAA,CAAA,OAAA,EAAA;;AAEM,YAAA,UAAU,CAAA,MAAV,EAAU;AAChB;AACJ;AAGK,O,QAAA,I;AACI;;AAEJ,WAAK,SAAL;AACF,G;AACA;AACD,OAAA,SAAA,QAAA,CAAA,KAAA,EAAA;AAED,MAAA,KAAA,GAAW,KAAK,CAAA,KAAhB;AAAA,MAAuB,KAAA,GAAA,KAAA,CAAA,KAAvB;AAAA,MAAuB,KAAA,GAAA,KAAA,CAAA,KAAvB;AAAA,MAAuB,UAAA,GAAA,KAAA,CAAA,UAAvB;;AAEA,MAAI,KAAA,IAAA,KAAJ,EAAe;AACb,IAAA,UAAO,CAAA,QAAP;AACD;AAED;;AACA,EAAA,UAAM,CAAK,IAAX,CAAc,KAAd;;AAEA,MAAI,UAAU,CAAA,MAAd,EAAqB;AACtB","sourcesContent":["/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nexport function range(start, count, scheduler) {\n    if (start === void 0) {\n        start = 0;\n    }\n    if (count === void 0) {\n        count = 0;\n    }\n    return new Observable(function (subscriber) {\n        var index = 0;\n        var current = start;\n        if (scheduler) {\n            return scheduler.schedule(dispatch, 0, {\n                index: index, count: count, start: start, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                if (index++ >= count) {\n                    subscriber.complete();\n                    break;\n                }\n                subscriber.next(current++);\n                if (subscriber.closed) {\n                    break;\n                }\n            } while (true);\n        }\n        return undefined;\n    });\n}\nexport function dispatch(state) {\n    var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;\n    if (index >= count) {\n        subscriber.complete();\n        return;\n    }\n    subscriber.next(start);\n    if (subscriber.closed) {\n        return;\n    }\n    state.index = index + 1;\n    state.start = start + 1;\n    this.schedule(state);\n}\n//# sourceMappingURL=range.js.map\n"]},"metadata":{},"sourceType":"module"}