{"ast":null,"code":"import _slicedToArray from \"/Users/annaortega/Documents/workspace/api-sandbox-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/annaortega/Documents/workspace/api-sandbox-app/src/App.tsx\";\nimport React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport luhn from \"luhn\";\nimport { Kushki } from \"@kushki/js\";\nimport { IMaskInput } from \"react-imask\";\nimport IMask from \"imask\";\nimport { getCardTypeByValue } from \"./utils/cardTypes\";\nimport { validateDate } from \"./utils/validateDate\";\nimport CardTypeDisplay from \"./CardTypeDisplay\";\nimport testCards from \"./utils/testCards\";\nimport axios from \"axios\";\nimport \"normalize.css\";\nimport \"./styles.scss\";\nvar chargeAmount = 49.99;\nvar chargeCurrency = \"USD\";\nvar KUSHKI_PUBLIC_MERCHANT_ID = \"20000000106212540000\";\nexport default function App() {\n  var _useForm = useForm(),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      watch = _useForm.watch,\n      errors = _useForm.errors,\n      setValue = _useForm.setValue,\n      reset = _useForm.reset;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      token = _useState2[0],\n      setToken = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = useState(undefined),\n      _useState8 = _slicedToArray(_useState7, 2),\n      success = _useState8[0],\n      setSuccess = _useState8[1];\n\n  var card = getCardTypeByValue(watch(\"cardNumber\"));\n  var kushki = new Kushki({\n    merchantId: KUSHKI_PUBLIC_MERCHANT_ID,\n    inTestEnvironment: true\n  });\n\n  var setValues = function setValues(type) {\n    setValue(\"cardNumber\", testCards[type].cardNumber);\n    setValue(\"cardName\", testCards[type].cardName);\n    setValue(\"expDate\", testCards[type].expDate);\n    setValue(\"cvc\", testCards[type].cvc);\n  };\n\n  var onSubmit = function onSubmit(data) {\n    setLoading(true);\n    setError(undefined);\n    setToken(\"\");\n    kushki.requestToken({\n      amount: chargeAmount,\n      currency: chargeCurrency,\n      card: {\n        name: data.cardName,\n        number: data.cardNumber.replace(/ /g, \"\"),\n        cvc: data.cvc,\n        expiryMonth: data.expDate.split(\"/\")[0],\n        expiryYear: data.expDate.split(\"/\")[1]\n      }\n    }, function (response) {\n      if (!response.code) {\n        setToken(response.token); //Check our backend example: https://github.com/MatiMenich/kushki-backend-examples/blob/master/api/cards.js\n\n        axios.post(\"https://kushki-backend-examples.vercel.app/api/cards\", {\n          amount: chargeAmount,\n          token: response.token\n        }).then(function (response) {\n          console.log(response.data);\n          setSuccess(response.data);\n        }).catch(function (error) {\n          if (error.response.data) {\n            setError(error.response.data.message);\n          } else {\n            console.error(error);\n          }\n        }).finally(function () {\n          setLoading(false);\n        });\n      } else {\n        setLoading(false);\n        setError(response.message);\n      }\n    });\n  };\n\n  var resetExample = function resetExample() {\n    setSuccess(undefined);\n    setToken(\"\");\n    reset();\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, !success ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    className: \"card-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IMaskInput, {\n    mask: \"0000 0000 0000 0000\",\n    unmask: true,\n    name: \"cardNumber\",\n    placeholder: \"N\\xFAmero de tarjeta\",\n    autoComplete: \"cc-number\",\n    inputRef: register({\n      required: \"Número de tarjeta requerido\",\n      pattern: {\n        value: /[\\d| ]{16,22}/,\n        message: \"Número de tarjeta incompleto\"\n      },\n      validate: function validate(value) {\n        return luhn.validate(value) || \"Número de tarjeta incorrecto\";\n      }\n    }),\n    className: \"form-input \".concat(errors.cardNumber ? \"form-input--error\" : \"\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(CardTypeDisplay, {\n    cards: [\"visa\", \"mastercard\", \"amex\", \"diners\"],\n    selected: card && card.type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 15\n    }\n  }), errors.cardNumber && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"error-display\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }\n  }, errors.cardNumber.message)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"cardName\",\n    placeholder: \"Nombre\",\n    autoComplete: \"cc-name\",\n    ref: register({\n      required: true\n    }),\n    className: \"form-input \".concat(errors.cardName ? \"form-input--error\" : \"\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 15\n    }\n  }), errors.cardName && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"error-display\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }\n  }, \"El nombre es requerido\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(IMaskInput, {\n    mask: \"MM/YY\",\n    blocks: {\n      YY: {\n        mask: \"00\"\n      },\n      MM: {\n        mask: IMask.MaskedRange,\n        from: 1,\n        to: 12\n      }\n    },\n    unmask: false,\n    name: \"expDate\",\n    placeholder: \"MM/YY\",\n    autoComplete: \"cc-exp\",\n    inputRef: register({\n      required: \"Expiración requerida\",\n      pattern: {\n        value: /\\d\\d\\/\\d\\d/,\n        message: \"Expiración incorrecta\"\n      },\n      validate: function validate(value) {\n        return validateDate(value) || \"Expiración vencida\";\n      }\n    }),\n    className: \"form-input \".concat(errors.expDate ? \"form-input--error\" : \"\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }\n  }), errors.expDate && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"error-display\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 19\n    }\n  }, errors.expDate.message)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"cvc\",\n    placeholder: card ? card.code.name : \"CVC\",\n    autoComplete: \"cc-csc\",\n    ref: register({\n      required: true,\n      pattern: /\\d{3,4}/\n    }),\n    className: \"form-input \".concat(errors.cvc ? \"form-input--error\" : \"\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 17\n    }\n  }), errors.cvc && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"error-display\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 19\n    }\n  }, \"CVC est\\xE1 incompleto\"))), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"form-submit-button \".concat(loading ? \"form-submit-button--loading\" : \"\"),\n    disabled: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }, loading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 17\n    }\n  }) : \"Pagar $\".concat(chargeAmount))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"test-data\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"test-data__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 15\n    }\n  }, \"Datos de prueba\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"option-button\",\n    onClick: function onClick() {\n      return setValues(\"approved\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 15\n    }\n  }, \"Transacci\\xF3n aprobada\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"option-button\",\n    onClick: function onClick() {\n      return setValues(\"declinedOnToken\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 15\n    }\n  }, \"Transacci\\xF3n declinada en solicitud de token\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"option-button\",\n    onClick: function onClick() {\n      return setValues(\"declined\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 15\n    }\n  }, \"Transacci\\xF3n declinada\")), token && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: \"1rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 17\n    }\n  }, \"Token obtenido:\"), \" \", token), error && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: \"1rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    className: \"text-red\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 17\n    }\n  }, \"Error:\"), \" \", error))) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"success-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"success-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 11\n    }\n  }, \"\\u2713\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"success-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 11\n    }\n  }, \"Transacci\\xF3n exitosa\"), /*#__PURE__*/React.createElement(\"pre\", {\n    className: \"success-code\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }\n  }, JSON.stringify(success, null, 2))), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"option-button\",\n    onClick: resetExample,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 11\n    }\n  }, \"Reiniciar ejemplo\")));\n}","map":{"version":3,"sources":["/Users/annaortega/Documents/workspace/api-sandbox-app/src/App.tsx"],"names":["React","useState","useForm","luhn","Kushki","IMaskInput","IMask","getCardTypeByValue","validateDate","CardTypeDisplay","testCards","axios","chargeAmount","chargeCurrency","KUSHKI_PUBLIC_MERCHANT_ID","App","register","handleSubmit","watch","errors","setValue","reset","token","setToken","undefined","error","setError","loading","setLoading","success","setSuccess","card","kushki","merchantId","inTestEnvironment","setValues","type","cardNumber","cardName","expDate","cvc","onSubmit","data","requestToken","amount","currency","name","number","replace","expiryMonth","split","expiryYear","response","code","post","then","console","log","catch","message","finally","resetExample","required","pattern","value","validate","YY","mask","MM","MaskedRange","from","to","marginTop","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport luhn from \"luhn\";\nimport { Kushki } from \"@kushki/js\";\nimport { IMaskInput } from \"react-imask\";\nimport IMask from \"imask\";\nimport { getCardTypeByValue } from \"./utils/cardTypes\";\nimport { validateDate } from \"./utils/validateDate\";\nimport CardTypeDisplay from \"./CardTypeDisplay\";\nimport testCards from \"./utils/testCards\";\nimport axios from \"axios\";\n\nimport \"normalize.css\";\nimport \"./styles.scss\";\n\ntype Inputs = {\n  cardNumber: string;\n  cardName: string;\n  expDate: string;\n  cvc: string;\n};\n\nconst chargeAmount = 49.99;\nconst chargeCurrency = \"USD\";\nconst KUSHKI_PUBLIC_MERCHANT_ID = \"20000000106212540000\";\n\nexport default function App() {\n  const { register, handleSubmit, watch, errors, setValue, reset } = useForm<\n    Inputs\n  >();\n  const [token, setToken] = useState<string>(\"\");\n  const [error, setError] = useState<string | undefined>(undefined);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [success, setSuccess] = useState<object | undefined>(undefined);\n\n  const card = getCardTypeByValue(watch(\"cardNumber\"));\n\n  const kushki = new Kushki({\n    merchantId: KUSHKI_PUBLIC_MERCHANT_ID,\n    inTestEnvironment: true\n  });\n\n  const setValues = (type: \"approved\" | \"declined\" | \"declinedOnToken\") => {\n    setValue(\"cardNumber\", testCards[type].cardNumber);\n    setValue(\"cardName\", testCards[type].cardName);\n    setValue(\"expDate\", testCards[type].expDate);\n    setValue(\"cvc\", testCards[type].cvc);\n  };\n\n  const onSubmit = (data: Inputs) => {\n    setLoading(true);\n    setError(undefined);\n    setToken(\"\");\n\n    kushki.requestToken(\n      {\n        amount: chargeAmount,\n        currency: chargeCurrency,\n        card: {\n          name: data.cardName,\n          number: data.cardNumber.replace(/ /g, \"\"),\n          cvc: data.cvc,\n          expiryMonth: data.expDate.split(\"/\")[0],\n          expiryYear: data.expDate.split(\"/\")[1]\n        }\n      },\n      (response: any) => {\n        if (!response.code) {\n          setToken(response.token);\n\n          //Check our backend example: https://github.com/MatiMenich/kushki-backend-examples/blob/master/api/cards.js\n          axios\n            .post(\"https://kushki-backend-examples.vercel.app/api/cards\", {\n              amount: chargeAmount,\n              token: response.token\n            })\n            .then((response) => {\n              console.log(response.data);\n              setSuccess(response.data);\n            })\n            .catch((error) => {\n              if (error.response.data) {\n                setError(error.response.data.message);\n              } else {\n                console.error(error);\n              }\n            })\n            .finally(() => {\n              setLoading(false);\n            });\n        } else {\n          setLoading(false);\n          setError(response.message);\n        }\n      }\n    );\n  };\n\n  const resetExample = () => {\n    setSuccess(undefined);\n    setToken(\"\");\n    reset();\n  };\n\n  return (\n    <>\n      {!success ? (\n        <>\n          <form onSubmit={handleSubmit(onSubmit)} className=\"card-form\">\n            <div className=\"form-group\">\n              <IMaskInput\n                mask={\"0000 0000 0000 0000\"}\n                unmask={true}\n                name=\"cardNumber\"\n                placeholder=\"Número de tarjeta\"\n                autoComplete=\"cc-number\"\n                inputRef={register({\n                  required: \"Número de tarjeta requerido\",\n                  pattern: {\n                    value: /[\\d| ]{16,22}/,\n                    message: \"Número de tarjeta incompleto\"\n                  },\n                  validate: (value: string) =>\n                    luhn.validate(value) || \"Número de tarjeta incorrecto\"\n                })}\n                className={`form-input ${\n                  errors.cardNumber ? \"form-input--error\" : \"\"\n                }`}\n              />\n              <CardTypeDisplay\n                cards={[\"visa\", \"mastercard\", \"amex\", \"diners\"]}\n                selected={card && card.type}\n              />\n              {errors.cardNumber && (\n                <span className=\"error-display\">\n                  {errors.cardNumber.message}\n                </span>\n              )}\n            </div>\n\n            <div className=\"form-group\">\n              <input\n                name=\"cardName\"\n                placeholder=\"Nombre\"\n                autoComplete=\"cc-name\"\n                ref={register({\n                  required: true\n                })}\n                className={`form-input ${\n                  errors.cardName ? \"form-input--error\" : \"\"\n                }`}\n              />\n              {errors.cardName && (\n                <span className=\"error-display\">El nombre es requerido</span>\n              )}\n            </div>\n\n            <div className=\"input-group\">\n              <div className=\"form-group\">\n                <IMaskInput\n                  mask={\"MM/YY\"}\n                  blocks={{\n                    YY: {\n                      mask: \"00\"\n                    },\n                    MM: {\n                      mask: IMask.MaskedRange,\n                      from: 1,\n                      to: 12\n                    }\n                  }}\n                  unmask={false}\n                  name=\"expDate\"\n                  placeholder=\"MM/YY\"\n                  autoComplete=\"cc-exp\"\n                  inputRef={register({\n                    required: \"Expiración requerida\",\n                    pattern: {\n                      value: /\\d\\d\\/\\d\\d/,\n                      message: \"Expiración incorrecta\"\n                    },\n                    validate: (value: string) =>\n                      validateDate(value) || \"Expiración vencida\"\n                  })}\n                  className={`form-input ${\n                    errors.expDate ? \"form-input--error\" : \"\"\n                  }`}\n                />\n                {errors.expDate && (\n                  <span className=\"error-display\">\n                    {errors.expDate.message}\n                  </span>\n                )}\n              </div>\n\n              <div className=\"form-group\">\n                <input\n                  name=\"cvc\"\n                  placeholder={card ? card.code.name : \"CVC\"}\n                  autoComplete=\"cc-csc\"\n                  ref={register({\n                    required: true,\n                    pattern: /\\d{3,4}/\n                  })}\n                  className={`form-input ${\n                    errors.cvc ? \"form-input--error\" : \"\"\n                  }`}\n                />\n                {errors.cvc && (\n                  <span className=\"error-display\">CVC está incompleto</span>\n                )}\n              </div>\n            </div>\n\n            <button\n              type=\"submit\"\n              className={`form-submit-button ${\n                loading ? \"form-submit-button--loading\" : \"\"\n              }`}\n              disabled={loading}\n            >\n              {loading ? (\n                <div className=\"spinner\"></div>\n              ) : (\n                `Pagar $${chargeAmount}`\n              )}\n            </button>\n          </form>\n\n          <div className=\"text-center\">\n            <div className=\"test-data\">\n              <span className=\"test-data__title\">Datos de prueba</span>\n              <button\n                className=\"option-button\"\n                onClick={() => setValues(\"approved\")}\n              >\n                Transacción aprobada\n              </button>\n              <button\n                className=\"option-button\"\n                onClick={() => setValues(\"declinedOnToken\")}\n              >\n                Transacción declinada en solicitud de token\n              </button>\n              <button\n                className=\"option-button\"\n                onClick={() => setValues(\"declined\")}\n              >\n                Transacción declinada\n              </button>\n            </div>\n\n            {token && (\n              <div style={{ marginTop: \"1rem\" }}>\n                <b>Token obtenido:</b> {token}\n              </div>\n            )}\n\n            {error && (\n              <div style={{ marginTop: \"1rem\" }}>\n                <b className=\"text-red\">Error:</b> {error}\n              </div>\n            )}\n          </div>\n        </>\n      ) : (\n        <div className=\"success-wrapper\">\n          <div className=\"success-icon\">✓</div>\n          <p className=\"success-title\">Transacción exitosa</p>\n          <pre className=\"success-code\">\n            <code>{JSON.stringify(success, null, 2)}</code>\n          </pre>\n          <button className=\"option-button\" onClick={resetExample}>\n            Reiniciar ejemplo\n          </button>\n        </div>\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}