"use strict";
exports.__esModule = true;
/**
 * Kushki file
 */
var Identifiers_1 = require("./../lib/constant/Identifiers");
var KushkiError_1 = require("./../lib/generic/KushkiError");
var Container_1 = require("./../lib/infrastructure/Container");
require("reflect-metadata");
var errors_1 = require("request-promise/errors");
/**
 * Implementation
 */
var Kushki = /** @class */ (function () {
    function Kushki(body) {
        body.inTestEnvironment =
            body.inTestEnvironment === undefined ? false : body.inTestEnvironment;
        body.regional = body.regional === undefined ? false : body.regional;
        this._merchantId = body.merchantId;
        this._inTestEnvironment = body.inTestEnvironment;
        this._regional = body.regional;
        this._cardService = Container_1.CONTAINER.get(Identifiers_1.IDENTIFIERS.CardService)(this._regional);
        this._transferService = Container_1.CONTAINER.get(Identifiers_1.IDENTIFIERS.TransferService)(this._regional);
        this._cashService = Container_1.CONTAINER.get(Identifiers_1.IDENTIFIERS.CashService)(this._regional);
        this._multiMerchantInfoService = Container_1.CONTAINER.get(Identifiers_1.IDENTIFIERS.MultiMerchantService)(this._regional);
        this._commissionService = Container_1.CONTAINER.get(Identifiers_1.IDENTIFIERS.CommissionService)(this._regional);
        this._kushkiService = Container_1.CONTAINER.get(Identifiers_1.IDENTIFIERS.KushkiService)(this._regional);
        this._secureService = Container_1.CONTAINER.get(Identifiers_1.IDENTIFIERS.SecureService)();
        this._cardAsyncService = Container_1.CONTAINER.get(Identifiers_1.IDENTIFIERS.CardAsyncService)();
        this._payoutsCashService = Container_1.CONTAINER.get(Identifiers_1.IDENTIFIERS.PayoutsCashService)(this._regional);
        this._payoutsTransferService = Container_1.CONTAINER.get(Identifiers_1.IDENTIFIERS.PayoutsTransferService)(this._regional);
        this._transferSubscriptionService = Container_1.CONTAINER.get(Identifiers_1.IDENTIFIERS.TransferSubscriptionService)(this._regional);
        this._mobileProcessorService = Container_1.CONTAINER.get(Identifiers_1.IDENTIFIERS.MobileProcessorService)();
    }
    Kushki.prototype.requestToken = function (body, callback) {
        this._resolve(this._cardService.requestToken(body, this._merchantId, this._inTestEnvironment, this._regional), callback);
    };
    Kushki.prototype.requestTokenCharge = function (body, callback) {
        this._resolve(this._cardService.requestTokenCharge(body, this._merchantId, this._inTestEnvironment, this._regional), callback);
    };
    Kushki.prototype.requestSubscriptionToken = function (body, callback) {
        this._resolve(this._cardService.requestSubscriptionToken(body, this._merchantId, this._inTestEnvironment, this._regional), callback);
    };
    Kushki.prototype.requestTransferToken = function (body, callback) {
        this._resolve(this._transferService.requestTransferToken(body, this._merchantId, this._inTestEnvironment, this._regional), callback);
    };
    Kushki.prototype.checkStatus = function (callback) {
        this._resolve(this._kushkiService.checkStatus(this._merchantId, this._inTestEnvironment, this._regional), callback);
    };
    Kushki.prototype.requestPseBankList = function (callback) {
        this._resolve(this._transferService.requestPseBankList(this._merchantId, this._inTestEnvironment, this._regional), callback);
    };
    Kushki.prototype.requestDeferred = function (body, callback) {
        this._resolve(this._cardService.requestDeferred(body, this._merchantId, this._inTestEnvironment, this._regional), callback);
    };
    Kushki.prototype.requestBinInfo = function (body, callback) {
        this._cardService
            .requestBinInfo(body, this._merchantId, this._inTestEnvironment, this._regional)
            .subscribe({
            error: function (err) {
                return Kushki._callbackError(err, callback);
            },
            next: function (response) {
                callback(response);
            }
        });
    };
    Kushki.prototype.requestBrandsByMerchant = function (callback) {
        this._kushkiService
            .requestBrandsByMerchant(this._merchantId, this._inTestEnvironment, this._regional)
            .subscribe({
            error: function (err) {
                return Kushki._callbackError(err, callback);
            },
            next: function (response) {
                callback(response);
            }
        });
    };
    Kushki.prototype.requestCashToken = function (body, callback) {
        this._resolve(this._cashService.requestCashToken(body, this._merchantId, this._inTestEnvironment, this._regional), callback);
    };
    Kushki.prototype.requestSecureServiceValidation = function (body, callback) {
        this._resolve(this._secureService.requestSecureServiceValidation(this._merchantId, body, this._inTestEnvironment, this._regional), callback);
    };
    Kushki.prototype.requestCardAsyncToken = function (body, callback) {
        this._resolve(this._cardAsyncService.requestCardAsyncToken(body, this._merchantId, this._inTestEnvironment, this._regional), callback);
    };
    Kushki.prototype.requestSubscriptionCardAsyncToken = function (body, callback) {
        this._resolve(this._cardAsyncService.requestCardSubscriptionAsyncToken(body, this._merchantId, this._inTestEnvironment, this._regional), callback);
    };
    Kushki.prototype.multiMerchantInfo = function (body, callback) {
        this._resolve(this._multiMerchantInfoService.multiMerchantInfo(body, this._merchantId, this._inTestEnvironment, this._regional), callback);
    };
    Kushki.prototype.requestPayoutsCashToken = function (body, callback) {
        this._resolve(this._payoutsCashService.requestPayoutsCashToken(body, this._merchantId, this._inTestEnvironment, this._regional), callback);
    };
    Kushki.prototype.requestPayoutsTransferToken = function (body, callback) {
        this._resolve(this._payoutsTransferService.requestPayoutsTransferToken(body, this._merchantId, this._inTestEnvironment, this._regional), callback);
    };
    Kushki.prototype.getCommissionConfiguration = function (body, callback) {
        this._resolve(this._commissionService.getCommissionConfiguration(body, this._merchantId, this._inTestEnvironment, this._regional), callback);
    };
    Kushki.prototype.requestTransferSubscriptionToken = function (body, callback) {
        this._resolve(this._transferSubscriptionService.requestToken(body, this._merchantId, this._inTestEnvironment, this._regional), callback);
    };
    Kushki.prototype.requestTransferSubscriptionBankList = function (callback) {
        this._resolve(this._transferSubscriptionService.requestBankList(this._merchantId, this._inTestEnvironment, this._regional), callback);
    };
    Kushki.prototype.requestPayoutsTransferBankList = function (callback) {
        this._resolve(this._payoutsTransferService.requestPayoutsTransferBankList(this._merchantId, this._inTestEnvironment, this._regional), callback);
    };
    Kushki.prototype.requestMobileProcessorToken = function (body, callback) {
        this._resolve(this._mobileProcessorService.requestToken(body, this._merchantId, this._inTestEnvironment, this._regional), callback);
    };
    Kushki._callbackError = function (err, callback) {
        if (err instanceof KushkiError_1.KushkiError)
            callback({
                code: "" + err.code,
                error: err.code + " - " + err.getMessage(),
                message: "" + err.getMessage()
            });
        else if (err instanceof errors_1.StatusCodeError)
            callback({
                code: "" + err.error.code,
                error: "" + err.error,
                message: "" + err.error.message
            });
        else
            callback({
                code: "K002",
                error: "Ha ocurrido un error inesperado.",
                message: "Ha ocurrido un error inesperado."
            });
    };
    Kushki.prototype._resolve = function (observable, callback) {
        observable.subscribe({
            error: function (err) { return Kushki._callbackError(err, callback); },
            next: function (response) {
                callback(response);
            }
        });
    };
    return Kushki;
}());
exports.Kushki = Kushki;
