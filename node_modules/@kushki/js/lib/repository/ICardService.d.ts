/* tslint:disable:all */
/**
 * ICardService file.
 */
import { Observable } from "rxjs";
import { BinBody } from "./../../lib/types/bin_body";
import { BinInfoResponse } from "./../../lib/types/bin_info_response";
import { IDeferredResponse } from "./../../lib/types/remote/deferred_response";
import { TokenResponse } from "./../../lib/types/remote/token_response";
import { SubscriptionTokenRequest } from "./../../lib/types/subscription_token_request";
import { SubscriptionIdRequest } from "./../../lib/types/subscriptionId_request";
import { TokenRequest } from "./../../lib/types/token_request";
export interface ICardService {
    /**
     *  Token
     * @param tokenRequest - tokens request body
     * @param mid - public merchant id
     * @param isTest - is test environment
     * @param regional - Define if endpoint used regional URL
     */
    requestToken(tokenRequest: TokenRequest, mid: string, isTest: boolean, regional: boolean): Observable<TokenResponse>;
    /**
     *  Subscription Token
     * @param subscriptionTokenRequest - subscription tokens request body
     * @param mid - public merchant id
     * @param isTest - is test environment
     * @param regional - Define if endpoint used regional URL
     */
    requestSubscriptionToken(subscriptionTokenRequest: SubscriptionTokenRequest, mid: string, isTest: boolean, regional: boolean): Observable<TokenResponse>;
    /**
     *  Subscription Token
     * @param binBody - deferred bin request body
     * @param mid - public merchant id
     * @param isTest - is test environment
     * @param regional - Define if endpoint used regional URL
     */
    requestDeferred(binBody: BinBody, mid: string, isTest: boolean, regional: boolean): Observable<IDeferredResponse[]>;
    /**
     *  Token Charge for subscriptions
     * @param tokenChargeRequest - subscription tokens request body
     * @param mid - public merchant id
     * @param isTest - is test environment
     * @param regional - for single IP
     */
    requestTokenCharge(tokenChargeRequest: SubscriptionIdRequest, mid: string, isTest: boolean, regional: boolean): Observable<TokenResponse>;
    /**
     *  BinInfo
     * @param binBody - deferred bin request body
     * @param mid - public merchant id
     * @param isTest - is test environment
     * @param regional - Define if endpoint used regional URL
     */
    requestBinInfo(binBody: BinBody, mid: string, isTest: boolean, regional: boolean): Observable<BinInfoResponse>;
}
