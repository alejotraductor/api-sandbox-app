"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
exports.__esModule = true;
/**
 * Card Service file
 */
var Identifiers_1 = require("./../../lib/constant/Identifiers");
var dot = require("dot-object");
var KushkiError_1 = require("./../../lib/generic/KushkiError");
var ErrorEnum_1 = require("./../../lib/infrastructure/ErrorEnum");
var inversify_1 = require("inversify");
require("reflect-metadata");
var operators_1 = require("rxjs/operators");
/**
 * Implementation
 */
var CardService = /** @class */ (function () {
    function CardService(gateway, antiFraud) {
        this._gateway = gateway;
        this._antiFraud = antiFraud;
        this._receipt = {
            amount: "totalAmount",
            "card.cvc": "card.cvv",
            "card.expiryMonth": "card.expiryMonth",
            "card.expiryYear": "card.expiryYear",
            "card.name": "card.name",
            "card.number": "card.number",
            currency: "currency",
            isDeferred: "isDeferred",
            months: "months",
            sessionId: "sessionId",
            userId: "userId"
        };
    }
    CardService.prototype.requestToken = function (request, mid, isTest, regional) {
        var _this = this;
        return this._gateway.requestMerchantSettings(mid, isTest, regional).pipe(operators_1.switchMap(function (merchant) {
            return _this._getScienceSession(request, mid, isTest, merchant);
        }), operators_1.map(function (siftObject) {
            request.isDeferred =
                request.isDeferred === undefined ? false : request.isDeferred;
            _this._checkRequestBody(request);
            return dot.transform(_this._receipt, __assign({}, request, siftObject));
        }), operators_1.switchMap(function (finalRequest) {
            return _this._gateway.requestToken(finalRequest, mid, isTest, regional);
        }));
    };
    CardService.prototype.requestTokenCharge = function (request, mid, isTest, regional) {
        var _this = this;
        return this._gateway.requestMerchantSettings(mid, isTest, regional).pipe(operators_1.switchMap(function (merchant) {
            return _this._antiFraud.createSiftScienceSession(request.subscriptionId, "", mid, isTest, merchant);
        }), operators_1.switchMap(function (siftObject) {
            return _this._gateway.requestTokenCharge(__assign({ subscriptionId: request.subscriptionId }, siftObject), mid, isTest, regional);
        }));
    };
    CardService.prototype.requestSubscriptionToken = function (subscriptionTokenRequest, mid, isTest, regional) {
        var _this = this;
        return this._gateway.requestMerchantSettings(mid, isTest, regional).pipe(operators_1.switchMap(function (merchant) {
            return _this._getScienceSession(subscriptionTokenRequest, mid, isTest, merchant);
        }), operators_1.map(function (siftObject) {
            _this._checkRequestBody(subscriptionTokenRequest);
            if (siftObject.userId === null || siftObject.sessionId === null)
                return dot.transform(_this._receipt, __assign({}, subscriptionTokenRequest));
            return dot.transform(_this._receipt, __assign({}, subscriptionTokenRequest, siftObject));
        }), operators_1.switchMap(function (body) {
            return _this._gateway.requestSubscriptionToken(body, mid, isTest, regional);
        }));
    };
    CardService.prototype.requestDeferred = function (binBody, mid, isTest, regional) {
        return this._gateway.requestDeferredConditions(mid, binBody.bin, isTest, regional);
    };
    CardService.prototype.requestBinInfo = function (binBody, mid, isTest, regional) {
        return this._gateway.requestBinInfo(mid, binBody.bin, isTest, regional);
    };
    CardService.prototype._checkCardLength = function (request) {
        if (request.card.number.length < 14 || request.card.number.length > 19)
            throw new KushkiError_1.KushkiError(ErrorEnum_1.ERRORS.E005);
    };
    CardService.prototype._getScienceSession = function (request, mid, isTest, merchant) {
        return this._antiFraud.createSiftScienceSession(request.card.number.substring(0, 6), request.card.number.slice(-4), mid, isTest, merchant);
    };
    CardService.prototype._checkCurrency = function (request) {
        request.currency =
            request.currency === undefined ? "USD" : request.currency;
    };
    CardService.prototype._checkAmount = function (request) {
        if (request.amount !== undefined && typeof request.amount === "string")
            request.amount = parseFloat(request.amount);
    };
    CardService.prototype._checkRequestBody = function (request) {
        this._checkCurrency(request);
        this._checkCardLength(request);
        this._checkAmount(request);
    };
    CardService = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(Identifiers_1.IDENTIFIERS.KushkiGateway)),
        __param(1, inversify_1.inject(Identifiers_1.IDENTIFIERS.AntiFraud)),
        __metadata("design:paramtypes", [Object, Object])
    ], CardService);
    return CardService;
}());
exports.CardService = CardService;
