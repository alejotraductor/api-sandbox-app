/* tslint:disable:all */
import "reflect-metadata";
import { IAntiFraud } from "./../../lib/repository/IAntiFraud";
import { ICardService } from "./../../lib/repository/ICardService";
import { IKushkiGateway } from "./../../lib/repository/IKushkiGateway";
import { Observable } from "rxjs";
import { BinBody } from "./../../lib/types/bin_body";
import { BinInfoResponse } from "./../../lib/types/bin_info_response";
import { IDeferredResponse } from "./../../lib/types/remote/deferred_response";
import { TokenResponse } from "./../../lib/types/remote/token_response";
import { SubscriptionTokenRequest } from "./../../lib/types/subscription_token_request";
import { SubscriptionIdRequest } from "./../../lib/types/subscriptionId_request";
import { TokenRequest } from "./../../lib/types/token_request";
/**
 * Implementation
 */
export declare class CardService implements ICardService {
    private readonly _gateway;
    private readonly _receipt;
    private readonly _antiFraud;
    constructor(gateway: IKushkiGateway, antiFraud: IAntiFraud);
    requestToken(request: TokenRequest, mid: string, isTest: boolean, regional: boolean): Observable<TokenResponse>;
    requestTokenCharge(request: SubscriptionIdRequest, mid: string, isTest: boolean, regional: boolean): Observable<TokenResponse>;
    requestSubscriptionToken(subscriptionTokenRequest: SubscriptionTokenRequest, mid: string, isTest: boolean, regional: boolean): Observable<TokenResponse>;
    requestDeferred(binBody: BinBody, mid: string, isTest: boolean, regional: boolean): Observable<IDeferredResponse[]>;
    requestBinInfo(binBody: BinBody, mid: string, isTest: boolean, regional: boolean): Observable<BinInfoResponse>;
    private _checkCardLength;
    private _getScienceSession;
    private _checkCurrency;
    private _checkAmount;
    private _checkRequestBody;
}
